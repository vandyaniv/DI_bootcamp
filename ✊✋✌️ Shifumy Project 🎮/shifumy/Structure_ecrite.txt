1.	Classe Game :
	•	Méthode get_user_item(self) :

	•	Demande à l’utilisateur de choisir entre “rock”, “paper”, ou “scissors”. ✓ 
	•	Continue de demander tant que la réponse n’est pas valide. ✓
	•	Retourne l’élément choisi.✓


	•	Méthode get_computer_item(self) :
	•	Sélectionne aléatoirement “rock”, “paper”, ou “scissors” pour l’ordinateur. ✓
	•	Utilise la fonction random.choice().✓


	•	Méthode get_game_result(self, user_item, computer_item) :

	•	Compare les choix de l’utilisateur et de l’ordinateur. ✓
	•	Détermine si l’utilisateur gagne, fait match nul, ou perd. ✓
	•	Retourne “win”, “draw”, ou “loss”. 
  
	•	Méthode play(self) :
	•	Récupère le choix de l’utilisateur et de l’ordinateur.
	•	Calcule le résultat du jeu.
	•	Affiche le résultat sous une forme claire.
	•	Retourne le résultat sous forme de chaîne.

2. Partie II - Rock-Paper-Scissors.py

	1.	Fonction get_user_menu_choice() :
	•	Affiche un menu simple avec les choix possibles.
	•	Récupère et valide le choix de l’utilisateur.
	•	Retourne le choix.
	2.	Fonction print_results(results) :
	•	Affiche un récapitulatif des résultats de tous les jeux joués.
	•	Le paramètre results est un dictionnaire avec le nombre de victoires, défaites, et matchs nuls.
	•	Remercie l’utilisateur d’avoir joué.
	3.	Fonction main() :
	•	Affiche le menu de manière répétée jusqu’à ce que l’utilisateur choisisse de quitter.
	•	Lorsque l’utilisateur choisit de jouer, crée un objet Game et appelle la méthode play().
	•	Garde en mémoire les résultats de chaque jeu joué.
	•	Lors de la sortie, affiche un résumé des résultats avec print_results().

